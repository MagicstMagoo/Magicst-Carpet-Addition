plugins {
	id('maven-publish')
	id('org.ajoberstar.grgit').version('4.1.0')
	alias(libs.plugins.quilt.loom)
}

setSourceCompatibility(JavaVersion.toVersion(project.java_version))
setTargetCompatibility(JavaVersion.toVersion(project.java_version))
String real_version = "${project.mod_version}"

if (project.pre_release as String != "") {
	real_version += "-${project.pre_release}+"
	if (project.pre_release as String == "alpha" && !grgit.status().clean) {
		real_version += new Date().format("yyyyMMdd.HHmmss") + ".dirty." + grgit.head().abbreviatedId
	} else {
		real_version += grgit.head().abbreviatedId
	}
}

setArchivesBaseName("${project.archives_base_name}-${project.minecraft_version}")
setVersion(real_version)
setGroup(project.maven_group)
repositories {
	maven {
		url "https://www.cursemaven.com"
	}
	mavenCentral()
}

dependencies {
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
	}
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api
	}

	// fabric-carpet
	modImplementation("curse.maven:carpet-349239:${project.carpet_core_version}")
	// multiconnect
	modImplementation("net.earthcomputer.multiconnect:multiconnect-api:${project.multiconnect_version}") {
		transitive = false
	}
	include("net.earthcomputer.multiconnect:multiconnect-api:${project.multiconnect_version}")
}

loom {
	accessWidenerPath.set(file("src/main/resources/pca.accesswidener"))
}

processResources {
	inputs.property "version", version
	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release.set(Integer.parseInt(project.java_version as String))
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}
